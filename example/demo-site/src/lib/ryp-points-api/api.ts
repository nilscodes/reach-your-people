/* tslint:disable */
/* eslint-disable */
/**
 * Core Points Service
 * The API for the core gamification points service of the Cardano Blockchain announcement and notification application \"Reach Your People\"
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@vibrantnet.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PointsClaim
 */
export interface PointsClaim {
    /**
     * An ID identifying a single RYP account
     * @type {number}
     * @memberof PointsClaim
     */
    'accountId': number;
    /**
     * 
     * @type {number}
     * @memberof PointsClaim
     */
    'tokenId': number;
    /**
     * 
     * @type {number}
     * @memberof PointsClaim
     */
    'points': number;
    /**
     * 
     * @type {string}
     * @memberof PointsClaim
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof PointsClaim
     */
    'claimId': string;
    /**
     * 
     * @type {boolean}
     * @memberof PointsClaim
     */
    'claimed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PointsClaim
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PointsClaim
     */
    'expirationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointsClaim
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointsClaim
     */
    'claimTime'?: string;
}
/**
 * 
 * @export
 * @interface PointsClaimPartial
 */
export interface PointsClaimPartial {
    /**
     * 
     * @type {boolean}
     * @memberof PointsClaimPartial
     */
    'claimed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PointsClaimPartial
     */
    'expirationTime'?: string;
}
/**
 * 
 * @export
 * @interface PointsSummary
 */
export interface PointsSummary {
    /**
     * 
     * @type {number}
     * @memberof PointsSummary
     */
    'tokenId': number;
    /**
     * 
     * @type {number}
     * @memberof PointsSummary
     */
    'totalPointsClaimed': number;
    /**
     * 
     * @type {number}
     * @memberof PointsSummary
     */
    'totalPointsAvailable': number;
    /**
     * 
     * @type {number}
     * @memberof PointsSummary
     */
    'totalPointsSpent': number;
    /**
     * 
     * @type {number}
     * @memberof PointsSummary
     */
    'totalPointsClaimable': number;
}
/**
 * 
 * @export
 * @interface PointsToken
 */
export interface PointsToken {
    /**
     * 
     * @type {number}
     * @memberof PointsToken
     */
    'id'?: number;
    /**
     * An ID identifying a single RYP account
     * @type {number}
     * @memberof PointsToken
     */
    'creator': number;
    /**
     * 
     * @type {string}
     * @memberof PointsToken
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PointsToken
     */
    'displayName': string;
    /**
     * 
     * @type {number}
     * @memberof PointsToken
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PointsToken
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointsToken
     */
    'modifyTime'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a specific points claim for the
         * @summary Create points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {PointsClaim} [pointsClaim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPointClaim: async (accountId: number, tokenId: number, claimId: string, pointsClaim?: PointsClaim, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createPointClaim', 'accountId', accountId)
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('createPointClaim', 'tokenId', tokenId)
            // verify required parameter 'claimId' is not null or undefined
            assertParamExists('createPointClaim', 'claimId', claimId)
            const localVarPath = `/points/accounts/{accountId}/claims/{tokenId}/{claimId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)))
                .replace(`{${"claimId"}}`, encodeURIComponent(String(claimId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pointsClaim, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new points token for use in the system
         * @summary Create new points token
         * @param {PointsToken} [pointsToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPointsToken: async (pointsToken?: PointsToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pointsToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
         * @summary Get point claims for user
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointClaimsForAccount: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getPointClaimsForAccount', 'accountId', accountId)
            const localVarPath = `/points/accounts/{accountId}/claims`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
         * @summary Get point claims for user
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointClaimsForAccountAndToken: async (accountId: number, tokenId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getPointClaimsForAccountAndToken', 'accountId', accountId)
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('getPointClaimsForAccountAndToken', 'tokenId', tokenId)
            const localVarPath = `/points/accounts/{accountId}/claims/{tokenId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a summary of points for each token for this user, including total accrued, spent and available
         * @summary Get points summary for account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsSummaryForAccount: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getPointsSummaryForAccount', 'accountId', accountId)
            const localVarPath = `/points/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed information on a points token
         * @summary Get points token details
         * @param {number} tokenId The numeric ID of the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsToken: async (tokenId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('getPointsToken', 'tokenId', tokenId)
            const localVarPath = `/tokens/{tokenId}`
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find out if a specific claim for a given token and claim ID exists for this account.
         * @summary Get specific points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPointClaimForAccountAndToken: async (accountId: number, tokenId: number, claimId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getSpecificPointClaimForAccountAndToken', 'accountId', accountId)
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('getSpecificPointClaimForAccountAndToken', 'tokenId', tokenId)
            // verify required parameter 'claimId' is not null or undefined
            assertParamExists('getSpecificPointClaimForAccountAndToken', 'claimId', claimId)
            const localVarPath = `/points/accounts/{accountId}/claims/{tokenId}/{claimId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)))
                .replace(`{${"claimId"}}`, encodeURIComponent(String(claimId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all points tokens, without limiting it to specific projects
         * @summary List all points tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPointsTokens: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Claim a specific point claim for this account and token
         * @summary Update points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {PointsClaimPartial} [pointsClaimPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePointClaim: async (accountId: number, tokenId: number, claimId: string, pointsClaimPartial?: PointsClaimPartial, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updatePointClaim', 'accountId', accountId)
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('updatePointClaim', 'tokenId', tokenId)
            // verify required parameter 'claimId' is not null or undefined
            assertParamExists('updatePointClaim', 'claimId', claimId)
            const localVarPath = `/points/accounts/{accountId}/claims/{tokenId}/{claimId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)))
                .replace(`{${"claimId"}}`, encodeURIComponent(String(claimId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pointsClaimPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a specific points claim for the
         * @summary Create points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {PointsClaim} [pointsClaim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPointClaim(accountId: number, tokenId: number, claimId: string, pointsClaim?: PointsClaim, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointsClaim>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPointClaim(accountId, tokenId, claimId, pointsClaim, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPointClaim']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new points token for use in the system
         * @summary Create new points token
         * @param {PointsToken} [pointsToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPointsToken(pointsToken?: PointsToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointsToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPointsToken(pointsToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPointsToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
         * @summary Get point claims for user
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPointClaimsForAccount(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointsClaim>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPointClaimsForAccount(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPointClaimsForAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
         * @summary Get point claims for user
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPointClaimsForAccountAndToken(accountId: number, tokenId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointsClaim>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPointClaimsForAccountAndToken(accountId, tokenId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPointClaimsForAccountAndToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a summary of points for each token for this user, including total accrued, spent and available
         * @summary Get points summary for account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPointsSummaryForAccount(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointsSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPointsSummaryForAccount(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPointsSummaryForAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get detailed information on a points token
         * @summary Get points token details
         * @param {number} tokenId The numeric ID of the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPointsToken(tokenId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointsToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPointsToken(tokenId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPointsToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Find out if a specific claim for a given token and claim ID exists for this account.
         * @summary Get specific points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificPointClaimForAccountAndToken(accountId: number, tokenId: number, claimId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointsClaim>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificPointClaimForAccountAndToken(accountId, tokenId, claimId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSpecificPointClaimForAccountAndToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of all points tokens, without limiting it to specific projects
         * @summary List all points tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPointsTokens(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PointsToken>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPointsTokens(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listPointsTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Claim a specific point claim for this account and token
         * @summary Update points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {PointsClaimPartial} [pointsClaimPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePointClaim(accountId: number, tokenId: number, claimId: string, pointsClaimPartial?: PointsClaimPartial, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PointsClaim>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePointClaim(accountId, tokenId, claimId, pointsClaimPartial, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updatePointClaim']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Create a specific points claim for the
         * @summary Create points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {PointsClaim} [pointsClaim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPointClaim(accountId: number, tokenId: number, claimId: string, pointsClaim?: PointsClaim, options?: any): AxiosPromise<PointsClaim> {
            return localVarFp.createPointClaim(accountId, tokenId, claimId, pointsClaim, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new points token for use in the system
         * @summary Create new points token
         * @param {PointsToken} [pointsToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPointsToken(pointsToken?: PointsToken, options?: any): AxiosPromise<PointsToken> {
            return localVarFp.createPointsToken(pointsToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
         * @summary Get point claims for user
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointClaimsForAccount(accountId: number, options?: any): AxiosPromise<Array<PointsClaim>> {
            return localVarFp.getPointClaimsForAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
         * @summary Get point claims for user
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointClaimsForAccountAndToken(accountId: number, tokenId: number, options?: any): AxiosPromise<Array<PointsClaim>> {
            return localVarFp.getPointClaimsForAccountAndToken(accountId, tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a summary of points for each token for this user, including total accrued, spent and available
         * @summary Get points summary for account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsSummaryForAccount(accountId: number, options?: any): AxiosPromise<Array<PointsSummary>> {
            return localVarFp.getPointsSummaryForAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed information on a points token
         * @summary Get points token details
         * @param {number} tokenId The numeric ID of the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPointsToken(tokenId: number, options?: any): AxiosPromise<PointsToken> {
            return localVarFp.getPointsToken(tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * Find out if a specific claim for a given token and claim ID exists for this account.
         * @summary Get specific points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPointClaimForAccountAndToken(accountId: number, tokenId: number, claimId: string, options?: any): AxiosPromise<PointsClaim> {
            return localVarFp.getSpecificPointClaimForAccountAndToken(accountId, tokenId, claimId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all points tokens, without limiting it to specific projects
         * @summary List all points tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPointsTokens(options?: any): AxiosPromise<Array<PointsToken>> {
            return localVarFp.listPointsTokens(options).then((request) => request(axios, basePath));
        },
        /**
         * Claim a specific point claim for this account and token
         * @summary Update points claim
         * @param {number} accountId The numeric ID of an account
         * @param {number} tokenId The numeric ID of the token
         * @param {string} claimId The unique ID of the claim
         * @param {PointsClaimPartial} [pointsClaimPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePointClaim(accountId: number, tokenId: number, claimId: string, pointsClaimPartial?: PointsClaimPartial, options?: any): AxiosPromise<PointsClaim> {
            return localVarFp.updatePointClaim(accountId, tokenId, claimId, pointsClaimPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create a specific points claim for the
     * @summary Create points claim
     * @param {number} accountId The numeric ID of an account
     * @param {number} tokenId The numeric ID of the token
     * @param {string} claimId The unique ID of the claim
     * @param {PointsClaim} [pointsClaim] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPointClaim(accountId: number, tokenId: number, claimId: string, pointsClaim?: PointsClaim, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPointClaim(accountId, tokenId, claimId, pointsClaim, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new points token for use in the system
     * @summary Create new points token
     * @param {PointsToken} [pointsToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPointsToken(pointsToken?: PointsToken, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPointsToken(pointsToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
     * @summary Get point claims for user
     * @param {number} accountId The numeric ID of an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPointClaimsForAccount(accountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPointClaimsForAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all point claims for this user, i.e. all individual points they are either able to claim or have claimed, regardless of the token.
     * @summary Get point claims for user
     * @param {number} accountId The numeric ID of an account
     * @param {number} tokenId The numeric ID of the token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPointClaimsForAccountAndToken(accountId: number, tokenId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPointClaimsForAccountAndToken(accountId, tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a summary of points for each token for this user, including total accrued, spent and available
     * @summary Get points summary for account
     * @param {number} accountId The numeric ID of an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPointsSummaryForAccount(accountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPointsSummaryForAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed information on a points token
     * @summary Get points token details
     * @param {number} tokenId The numeric ID of the token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPointsToken(tokenId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPointsToken(tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find out if a specific claim for a given token and claim ID exists for this account.
     * @summary Get specific points claim
     * @param {number} accountId The numeric ID of an account
     * @param {number} tokenId The numeric ID of the token
     * @param {string} claimId The unique ID of the claim
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpecificPointClaimForAccountAndToken(accountId: number, tokenId: number, claimId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpecificPointClaimForAccountAndToken(accountId, tokenId, claimId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all points tokens, without limiting it to specific projects
     * @summary List all points tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPointsTokens(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPointsTokens(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Claim a specific point claim for this account and token
     * @summary Update points claim
     * @param {number} accountId The numeric ID of an account
     * @param {number} tokenId The numeric ID of the token
     * @param {string} claimId The unique ID of the claim
     * @param {PointsClaimPartial} [pointsClaimPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePointClaim(accountId: number, tokenId: number, claimId: string, pointsClaimPartial?: PointsClaimPartial, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePointClaim(accountId, tokenId, claimId, pointsClaimPartial, options).then((request) => request(this.axios, this.basePath));
    }
}



