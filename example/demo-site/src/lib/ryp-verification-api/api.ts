/* tslint:disable */
/* eslint-disable */
/**
 * Core Verification Service
 * The API for the core verification service of the Cardano Blockchain announcement and notification application \"Reach Your People\"
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@vibrantnet.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DRepDetails
 */
export interface DRepDetails {
    /**
     * The dRep pubkey blake hash in hex
     * @type {string}
     * @memberof DRepDetails
     */
    'drepId': string;
    /**
     * The dRep ID of a dRep, in viewable Bech32 format
     * @type {string}
     * @memberof DRepDetails
     */
    'drepView': string;
    /**
     * 
     * @type {string}
     * @memberof DRepDetails
     */
    'displayName': string;
    /**
     * Epoch when the collected information applies
     * @type {number}
     * @memberof DRepDetails
     */
    'currentEpoch': number;
    /**
     * Epoch until currently marked as active, if available - considered inactive if empty (either newly registered or no longer active).
     * @type {number}
     * @memberof DRepDetails
     */
    'activeUntil'?: number;
    /**
     * Delegation in lovelace, at the epoch boundary matching the epoch property
     * @type {number}
     * @memberof DRepDetails
     */
    'delegation': number;
}
/**
 * 
 * @export
 * @interface StakepoolDetails
 */
export interface StakepoolDetails {
    /**
     * The stakepool hash in hex
     * @type {string}
     * @memberof StakepoolDetails
     */
    'poolHash': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails
     */
    'ticker': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails
     */
    'homepage': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface StakepoolDetails1
 */
export interface StakepoolDetails1 {
    /**
     * The stakepool hash in hex
     * @type {string}
     * @memberof StakepoolDetails1
     */
    'poolHash': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails1
     */
    'ticker': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails1
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails1
     */
    'homepage': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolDetails1
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface StakepoolVerification
 */
export interface StakepoolVerification {
    /**
     * The nonce to use in the CIP-0022 message to sign
     * @type {string}
     * @memberof StakepoolVerification
     */
    'nonce': string;
    /**
     * The domain to use in the CIP-0022 message to sign
     * @type {string}
     * @memberof StakepoolVerification
     */
    'domain': string;
    /**
     * The stakepool hash in hex
     * @type {string}
     * @memberof StakepoolVerification
     */
    'poolHash': string;
    /**
     * 
     * @type {VrfVerificationKey}
     * @memberof StakepoolVerification
     */
    'vrfVerificationKey'?: VrfVerificationKey;
    /**
     * The hex string containing the signed message
     * @type {string}
     * @memberof StakepoolVerification
     */
    'signature'?: string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolVerification
     */
    'createTime': string;
    /**
     * 
     * @type {string}
     * @memberof StakepoolVerification
     */
    'expirationTime': string;
}
/**
 * 
 * @export
 * @interface TokenOwnershipInfoWithAssetCount
 */
export interface TokenOwnershipInfoWithAssetCount {
    /**
     * The staking address of a wallet, in viewable format
     * @type {string}
     * @memberof TokenOwnershipInfoWithAssetCount
     */
    'stakeAddress': string;
    /**
     * The Policy ID
     * @type {string}
     * @memberof TokenOwnershipInfoWithAssetCount
     */
    'policyId': string;
    /**
     * 
     * @type {number}
     * @memberof TokenOwnershipInfoWithAssetCount
     */
    'assetCount': number;
}
/**
 * 
 * @export
 * @interface TransactionSummary
 */
export interface TransactionSummary {
    /**
     * The transaction hash in hex format
     * @type {string}
     * @memberof TransactionSummary
     */
    'transactionHash': string;
    /**
     * 
     * @type {Array<TxOutputSummary>}
     * @memberof TransactionSummary
     */
    'outputs': Array<TxOutputSummary>;
}
/**
 * 
 * @export
 * @interface TxOutputSummary
 */
export interface TxOutputSummary {
    /**
     * 
     * @type {string}
     * @memberof TxOutputSummary
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof TxOutputSummary
     */
    'lovelace': number;
}
/**
 * The base64 encoded JSON object that is the content of your VRF verification key file. It should have three properties,
 * @export
 * @interface VrfVerificationKey
 */
export interface VrfVerificationKey {
    /**
     * 
     * @type {string}
     * @memberof VrfVerificationKey
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof VrfVerificationKey
     */
    'description': string;
    /**
     * The CBOR hex string containing your VRF verification key
     * @type {string}
     * @memberof VrfVerificationKey
     */
    'cborHex': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Complete verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {string} verificationNonce The nonce to use in the verification flow
         * @param {StakepoolVerification} [stakepoolVerification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeStakepoolVerification: async (poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolHash' is not null or undefined
            assertParamExists('completeStakepoolVerification', 'poolHash', poolHash)
            // verify required parameter 'verificationNonce' is not null or undefined
            assertParamExists('completeStakepoolVerification', 'verificationNonce', verificationNonce)
            const localVarPath = `/pools/{poolHash}/verifications/{verificationNonce}`
                .replace(`{${"poolHash"}}`, encodeURIComponent(String(poolHash)))
                .replace(`{${"verificationNonce"}}`, encodeURIComponent(String(verificationNonce)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stakepoolVerification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get dRep details
         * @param {string} drepId The dRep ID of a dRep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDRepDetails: async (drepId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drepId' is not null or undefined
            assertParamExists('getDRepDetails', 'drepId', drepId)
            const localVarPath = `/dreps/{drepId}`
                .replace(`{${"drepId"}}`, encodeURIComponent(String(drepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get dRep details for a given stake address, if currently delegated
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrepDetailsForStakeAddress: async (stakeAddress: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stakeAddress' is not null or undefined
            assertParamExists('getDrepDetailsForStakeAddress', 'stakeAddress', stakeAddress)
            const localVarPath = `/stake/{stakeAddress}/drep`
                .replace(`{${"stakeAddress"}}`, encodeURIComponent(String(stakeAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get policy IDs and asset counts for a stake address
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultiAssetCountForStakeAddress: async (stakeAddress: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stakeAddress' is not null or undefined
            assertParamExists('getMultiAssetCountForStakeAddress', 'stakeAddress', stakeAddress)
            const localVarPath = `/stake/{stakeAddress}/assetcounts`
                .replace(`{${"stakeAddress"}}`, encodeURIComponent(String(stakeAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get stakepool details
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakepoolDetails: async (poolHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolHash' is not null or undefined
            assertParamExists('getStakepoolDetails', 'poolHash', poolHash)
            const localVarPath = `/pools/{poolHash}`
                .replace(`{${"poolHash"}}`, encodeURIComponent(String(poolHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get stake pool details for a given stake address, if currently staked
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakepoolDetailsForStakeAddress: async (stakeAddress: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stakeAddress' is not null or undefined
            assertParamExists('getStakepoolDetailsForStakeAddress', 'stakeAddress', stakeAddress)
            const localVarPath = `/stake/{stakeAddress}/pool`
                .replace(`{${"stakeAddress"}}`, encodeURIComponent(String(stakeAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get transaction summary
         * @param {string} transactionHash The hash of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionSummary: async (transactionHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionHash' is not null or undefined
            assertParamExists('getTransactionSummary', 'transactionHash', transactionHash)
            const localVarPath = `/transactions/{transactionHash}/summary`
                .replace(`{${"transactionHash"}}`, encodeURIComponent(String(transactionHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startStakepoolVerification: async (poolHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolHash' is not null or undefined
            assertParamExists('startStakepoolVerification', 'poolHash', poolHash)
            const localVarPath = `/pools/{poolHash}/verifications`
                .replace(`{${"poolHash"}}`, encodeURIComponent(String(poolHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {string} verificationNonce The nonce to use in the verification flow
         * @param {StakepoolVerification} [stakepoolVerification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStakepoolVerification: async (poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poolHash' is not null or undefined
            assertParamExists('testStakepoolVerification', 'poolHash', poolHash)
            // verify required parameter 'verificationNonce' is not null or undefined
            assertParamExists('testStakepoolVerification', 'verificationNonce', verificationNonce)
            const localVarPath = `/pools/{poolHash}/verifications/{verificationNonce}`
                .replace(`{${"poolHash"}}`, encodeURIComponent(String(poolHash)))
                .replace(`{${"verificationNonce"}}`, encodeURIComponent(String(verificationNonce)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stakepoolVerification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify if given reference ID of provider is a valid CIP-0066 identity for the given policy ID
         * @param {string} policyId The cardano policy ID of a token
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCip66: async (policyId: string, providerType: string, referenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('verifyCip66', 'policyId', policyId)
            // verify required parameter 'providerType' is not null or undefined
            assertParamExists('verifyCip66', 'providerType', providerType)
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('verifyCip66', 'referenceId', referenceId)
            const localVarPath = `/cip66/{policyId}/{providerType}/{referenceId}`
                .replace(`{${"policyId"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"providerType"}}`, encodeURIComponent(String(providerType)))
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Complete verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {string} verificationNonce The nonce to use in the verification flow
         * @param {StakepoolVerification} [stakepoolVerification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeStakepoolVerification(poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakepoolVerification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeStakepoolVerification(poolHash, verificationNonce, stakepoolVerification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.completeStakepoolVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get dRep details
         * @param {string} drepId The dRep ID of a dRep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDRepDetails(drepId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DRepDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDRepDetails(drepId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDRepDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get dRep details for a given stake address, if currently delegated
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrepDetailsForStakeAddress(stakeAddress: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DRepDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrepDetailsForStakeAddress(stakeAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDrepDetailsForStakeAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get policy IDs and asset counts for a stake address
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultiAssetCountForStakeAddress(stakeAddress: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TokenOwnershipInfoWithAssetCount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultiAssetCountForStakeAddress(stakeAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMultiAssetCountForStakeAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get stakepool details
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStakepoolDetails(poolHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakepoolDetails1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakepoolDetails(poolHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStakepoolDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get stake pool details for a given stake address, if currently staked
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStakepoolDetailsForStakeAddress(stakeAddress: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakepoolDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakepoolDetailsForStakeAddress(stakeAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStakepoolDetailsForStakeAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get transaction summary
         * @param {string} transactionHash The hash of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionSummary(transactionHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionSummary(transactionHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTransactionSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startStakepoolVerification(poolHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakepoolVerification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startStakepoolVerification(poolHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.startStakepoolVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Test verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {string} verificationNonce The nonce to use in the verification flow
         * @param {StakepoolVerification} [stakepoolVerification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testStakepoolVerification(poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakepoolVerification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testStakepoolVerification(poolHash, verificationNonce, stakepoolVerification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.testStakepoolVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify if given reference ID of provider is a valid CIP-0066 identity for the given policy ID
         * @param {string} policyId The cardano policy ID of a token
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyCip66(policyId: string, providerType: string, referenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyCip66(policyId, providerType, referenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyCip66']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Complete verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {string} verificationNonce The nonce to use in the verification flow
         * @param {StakepoolVerification} [stakepoolVerification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeStakepoolVerification(poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options?: any): AxiosPromise<StakepoolVerification> {
            return localVarFp.completeStakepoolVerification(poolHash, verificationNonce, stakepoolVerification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get dRep details
         * @param {string} drepId The dRep ID of a dRep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDRepDetails(drepId: string, options?: any): AxiosPromise<DRepDetails> {
            return localVarFp.getDRepDetails(drepId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get dRep details for a given stake address, if currently delegated
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrepDetailsForStakeAddress(stakeAddress: string, options?: any): AxiosPromise<DRepDetails> {
            return localVarFp.getDrepDetailsForStakeAddress(stakeAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get policy IDs and asset counts for a stake address
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultiAssetCountForStakeAddress(stakeAddress: string, options?: any): AxiosPromise<Array<TokenOwnershipInfoWithAssetCount>> {
            return localVarFp.getMultiAssetCountForStakeAddress(stakeAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get stakepool details
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakepoolDetails(poolHash: string, options?: any): AxiosPromise<StakepoolDetails1> {
            return localVarFp.getStakepoolDetails(poolHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get stake pool details for a given stake address, if currently staked
         * @param {string} stakeAddress The staking address of a wallet in view format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakepoolDetailsForStakeAddress(stakeAddress: string, options?: any): AxiosPromise<StakepoolDetails> {
            return localVarFp.getStakepoolDetailsForStakeAddress(stakeAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get transaction summary
         * @param {string} transactionHash The hash of the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionSummary(transactionHash: string, options?: any): AxiosPromise<TransactionSummary> {
            return localVarFp.getTransactionSummary(transactionHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startStakepoolVerification(poolHash: string, options?: any): AxiosPromise<StakepoolVerification> {
            return localVarFp.startStakepoolVerification(poolHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Test verification flow for stake pool
         * @param {string} poolHash The hash of a Cardano stakepool
         * @param {string} verificationNonce The nonce to use in the verification flow
         * @param {StakepoolVerification} [stakepoolVerification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testStakepoolVerification(poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options?: any): AxiosPromise<StakepoolVerification> {
            return localVarFp.testStakepoolVerification(poolHash, verificationNonce, stakepoolVerification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify if given reference ID of provider is a valid CIP-0066 identity for the given policy ID
         * @param {string} policyId The cardano policy ID of a token
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyCip66(policyId: string, providerType: string, referenceId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.verifyCip66(policyId, providerType, referenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Complete verification flow for stake pool
     * @param {string} poolHash The hash of a Cardano stakepool
     * @param {string} verificationNonce The nonce to use in the verification flow
     * @param {StakepoolVerification} [stakepoolVerification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public completeStakepoolVerification(poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).completeStakepoolVerification(poolHash, verificationNonce, stakepoolVerification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get dRep details
     * @param {string} drepId The dRep ID of a dRep
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDRepDetails(drepId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDRepDetails(drepId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get dRep details for a given stake address, if currently delegated
     * @param {string} stakeAddress The staking address of a wallet in view format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDrepDetailsForStakeAddress(stakeAddress: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDrepDetailsForStakeAddress(stakeAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get policy IDs and asset counts for a stake address
     * @param {string} stakeAddress The staking address of a wallet in view format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMultiAssetCountForStakeAddress(stakeAddress: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMultiAssetCountForStakeAddress(stakeAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get stakepool details
     * @param {string} poolHash The hash of a Cardano stakepool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakepoolDetails(poolHash: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStakepoolDetails(poolHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get stake pool details for a given stake address, if currently staked
     * @param {string} stakeAddress The staking address of a wallet in view format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakepoolDetailsForStakeAddress(stakeAddress: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStakepoolDetailsForStakeAddress(stakeAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get transaction summary
     * @param {string} transactionHash The hash of the transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransactionSummary(transactionHash: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTransactionSummary(transactionHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new verification flow for stake pool
     * @param {string} poolHash The hash of a Cardano stakepool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startStakepoolVerification(poolHash: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startStakepoolVerification(poolHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Test verification flow for stake pool
     * @param {string} poolHash The hash of a Cardano stakepool
     * @param {string} verificationNonce The nonce to use in the verification flow
     * @param {StakepoolVerification} [stakepoolVerification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testStakepoolVerification(poolHash: string, verificationNonce: string, stakepoolVerification?: StakepoolVerification, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testStakepoolVerification(poolHash, verificationNonce, stakepoolVerification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify if given reference ID of provider is a valid CIP-0066 identity for the given policy ID
     * @param {string} policyId The cardano policy ID of a token
     * @param {string} providerType The provider or integration type for an external account
     * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyCip66(policyId: string, providerType: string, referenceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyCip66(policyId, providerType, referenceId, options).then((request) => request(this.axios, this.basePath));
    }
}



