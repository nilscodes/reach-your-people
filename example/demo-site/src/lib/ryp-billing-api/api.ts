/* tslint:disable */
/* eslint-disable */
/**
 * Core Billing Service
 * The API for the core billing and payment checking service of the Cardano Blockchain announcement and notification application \"Reach Your People\"
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@vibrantnet.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Bill
 */
export interface Bill {
    /**
     * 
     * @type {number}
     * @memberof Bill
     */
    'id': number;
    /**
     * The payment channel for this bill.
     * @type {string}
     * @memberof Bill
     */
    'channel': string;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    'createTime': string;
    /**
     * The amount requested in the currency denoted in the respective property
     * @type {number}
     * @memberof Bill
     */
    'amountRequested': number;
    /**
     * The amount received in the currency denoted in the respective property
     * @type {number}
     * @memberof Bill
     */
    'amountReceived'?: number;
    /**
     * The currency in which the transaction will be performed (for now only ADA (lovelace) with ID 1 is supported)
     * @type {number}
     * @memberof Bill
     */
    'currencyId': number;
    /**
     * The identifier by which the payment transaction can be looked up. Depends on the channel type.
     * @type {string}
     * @memberof Bill
     */
    'transactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    'paymentProcessedTime'?: string;
    /**
     * 
     * @type {Order}
     * @memberof Bill
     */
    'order': Order;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id': number;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    'items': Array<OrderItem>;
}
/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * The type of item
     * @type {string}
     * @memberof OrderItem
     */
    'type': string;
    /**
     * The amount of the item that was ordered the claim
     * @type {number}
     * @memberof OrderItem
     */
    'amount': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a bill for an account
         * @summary Create new bill
         * @param {number} accountId The numeric ID of an account
         * @param {Bill} [bill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBill: async (accountId: number, bill?: Bill, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('createBill', 'accountId', accountId)
            const localVarPath = `/billing/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bill, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all open and paid bills for an account
         * @summary Get all bills for this account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillsForAccount: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getBillsForAccount', 'accountId', accountId)
            const localVarPath = `/billing/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a bill for an account
         * @summary Create new bill
         * @param {number} accountId The numeric ID of an account
         * @param {Bill} [bill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBill(accountId: number, bill?: Bill, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBill(accountId, bill, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of all open and paid bills for an account
         * @summary Get all bills for this account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillsForAccount(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bill>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillsForAccount(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBillsForAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Create a bill for an account
         * @summary Create new bill
         * @param {number} accountId The numeric ID of an account
         * @param {Bill} [bill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBill(accountId: number, bill?: Bill, options?: any): AxiosPromise<Bill> {
            return localVarFp.createBill(accountId, bill, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all open and paid bills for an account
         * @summary Get all bills for this account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillsForAccount(accountId: number, options?: any): AxiosPromise<Array<Bill>> {
            return localVarFp.getBillsForAccount(accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create a bill for an account
     * @summary Create new bill
     * @param {number} accountId The numeric ID of an account
     * @param {Bill} [bill] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBill(accountId: number, bill?: Bill, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBill(accountId, bill, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all open and paid bills for an account
     * @summary Get all bills for this account
     * @param {number} accountId The numeric ID of an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBillsForAccount(accountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBillsForAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }
}



