/* tslint:disable */
/* eslint-disable */
/**
 * Core Subscription Service
 * The API for the core subscription management service of the Cardano Blockchain announcement and notification application \"Reach Your People\"
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@vibrantnet.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'createTime'?: string;
}
/**
 * 
 * @export
 * @interface AccountPartial
 */
export interface AccountPartial {
    /**
     * 
     * @type {string}
     * @memberof AccountPartial
     */
    'displayName'?: string;
}
/**
 * 
 * @export
 * @interface CreateExternalAccountRequest
 */
export interface CreateExternalAccountRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateExternalAccountRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateExternalAccountRequest
     */
    'registrationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExternalAccountRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExternalAccountRequest
     */
    'referenceId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExternalAccountRequest
     */
    'referenceName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateExternalAccountRequest
     */
    'displayName'?: string;
}
/**
 * 
 * @export
 * @interface GetGlobalSubscriptions200ResponseInner
 */
export interface GetGlobalSubscriptions200ResponseInner {
    /**
     * 
     * @type {number}
     * @memberof GetGlobalSubscriptions200ResponseInner
     */
    'id'?: number;
    /**
     * A project ID or empty, if explicitly subscribed to everything
     * @type {number}
     * @memberof GetGlobalSubscriptions200ResponseInner
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetGlobalSubscriptions200ResponseInner
     */
    'status': GetGlobalSubscriptions200ResponseInnerStatusEnum;
    /**
     * Referenced Account ID that owns this subscription setting
     * @type {number}
     * @memberof GetGlobalSubscriptions200ResponseInner
     */
    'accountId': number;
}

export const GetGlobalSubscriptions200ResponseInnerStatusEnum = {
    Subscribed: 'SUBSCRIBED',
    Blocked: 'BLOCKED'
} as const;

export type GetGlobalSubscriptions200ResponseInnerStatusEnum = typeof GetGlobalSubscriptions200ResponseInnerStatusEnum[keyof typeof GetGlobalSubscriptions200ResponseInnerStatusEnum];

/**
 * 
 * @export
 * @interface GetLinkedExternalAccounts200ResponseInner
 */
export interface GetLinkedExternalAccounts200ResponseInner {
    /**
     * 
     * @type {CreateExternalAccountRequest}
     * @memberof GetLinkedExternalAccounts200ResponseInner
     */
    'externalAccount': CreateExternalAccountRequest;
    /**
     * 
     * @type {string}
     * @memberof GetLinkedExternalAccounts200ResponseInner
     */
    'role': GetLinkedExternalAccounts200ResponseInnerRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof GetLinkedExternalAccounts200ResponseInner
     */
    'linkTime': string;
}

export const GetLinkedExternalAccounts200ResponseInnerRoleEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Publisher: 'PUBLISHER',
    Subscriber: 'SUBSCRIBER'
} as const;

export type GetLinkedExternalAccounts200ResponseInnerRoleEnum = typeof GetLinkedExternalAccounts200ResponseInnerRoleEnum[keyof typeof GetLinkedExternalAccounts200ResponseInnerRoleEnum];

/**
 * 
 * @export
 * @interface LinkExternalAccount200Response
 */
export interface LinkExternalAccount200Response {
    /**
     * 
     * @type {CreateExternalAccountRequest}
     * @memberof LinkExternalAccount200Response
     */
    'externalAccount': CreateExternalAccountRequest;
    /**
     * 
     * @type {string}
     * @memberof LinkExternalAccount200Response
     */
    'role': LinkExternalAccount200ResponseRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof LinkExternalAccount200Response
     */
    'linkTime': string;
}

export const LinkExternalAccount200ResponseRoleEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Publisher: 'PUBLISHER',
    Subscriber: 'SUBSCRIBER'
} as const;

export type LinkExternalAccount200ResponseRoleEnum = typeof LinkExternalAccount200ResponseRoleEnum[keyof typeof LinkExternalAccount200ResponseRoleEnum];

/**
 * 
 * @export
 * @interface SubscribeAccountToProjectRequest
 */
export interface SubscribeAccountToProjectRequest {
    /**
     * A project ID or empty, if explicitly subscribed to everything
     * @type {number}
     * @memberof SubscribeAccountToProjectRequest
     */
    'projectId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubscribeAccountToProjectRequest
     */
    'status': SubscribeAccountToProjectRequestStatusEnum;
}

export const SubscribeAccountToProjectRequestStatusEnum = {
    Subscribed: 'SUBSCRIBED',
    Blocked: 'BLOCKED'
} as const;

export type SubscribeAccountToProjectRequestStatusEnum = typeof SubscribeAccountToProjectRequestStatusEnum[keyof typeof SubscribeAccountToProjectRequestStatusEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new account.
         * @summary Create New Account
         * @param {Account} account Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (account: Account, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('createAccount', 'account', account)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create External Account
         * @param {CreateExternalAccountRequest} createExternalAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalAccount: async (createExternalAccountRequest: CreateExternalAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExternalAccountRequest' is not null or undefined
            assertParamExists('createExternalAccount', 'createExternalAccountRequest', createExternalAccountRequest)
            const localVarPath = `/externalaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExternalAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Look up an account by provider and the corresponding reference ID, to see if the account is used somewhere, without knowing the internal ID of the linked OWNER account
         * @summary Find Account by External Account Provider
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAccountByProviderAndReferenceId: async (providerType: string, referenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerType' is not null or undefined
            assertParamExists('findAccountByProviderAndReferenceId', 'providerType', providerType)
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('findAccountByProviderAndReferenceId', 'referenceId', referenceId)
            const localVarPath = `/accounts/{providerType}/{referenceId}`
                .replace(`{${"providerType"}}`, encodeURIComponent(String(providerType)))
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Look up an external account by provider and the corresponding reference ID, to see if the external account is used somewhere, without knowing the internal ID.
         * @summary Find External Account by Provider
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findExternalAccountByProviderAndReferenceId: async (providerType: string, referenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerType' is not null or undefined
            assertParamExists('findExternalAccountByProviderAndReferenceId', 'providerType', providerType)
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('findExternalAccountByProviderAndReferenceId', 'referenceId', referenceId)
            const localVarPath = `/externalaccounts/{providerType}/{referenceId}`
                .replace(`{${"providerType"}}`, encodeURIComponent(String(providerType)))
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the information of the account with the matching account ID.
         * @summary Get Account Info by numeric ID
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountById', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all subscriptions for an account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptionsForAccount: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAllSubscriptionsForAccount', 'accountId', accountId)
            const localVarPath = `/subscriptions/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all subscription for a project
         * @param {number} projectId The numeric ID of a Project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptionsForProject: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getAllSubscriptionsForProject', 'projectId', projectId)
            const localVarPath = `/subscriptions/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all subscriptions that are global and as such relate to everything that occurs to projects related in an account\'s wallet.
         * @summary Get global subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalSubscriptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show linked external accounts
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkedExternalAccounts: async (accountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getLinkedExternalAccounts', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/externalaccounts`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Links an existing external account to this account (if possible)
         * @summary Link existing external account
         * @param {number} accountId The numeric ID of an account
         * @param {number} externalAccountId The numeric ID of an external account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkExternalAccount: async (accountId: number, externalAccountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('linkExternalAccount', 'accountId', accountId)
            // verify required parameter 'externalAccountId' is not null or undefined
            assertParamExists('linkExternalAccount', 'externalAccountId', externalAccountId)
            const localVarPath = `/accounts/{accountId}/externalaccounts/{externalAccountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"externalAccountId"}}`, encodeURIComponent(String(externalAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new subscription for this account
         * @param {number} accountId The numeric ID of an account
         * @param {SubscribeAccountToProjectRequest} subscribeAccountToProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeAccountToProject: async (accountId: number, subscribeAccountToProjectRequest: SubscribeAccountToProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('subscribeAccountToProject', 'accountId', accountId)
            // verify required parameter 'subscribeAccountToProjectRequest' is not null or undefined
            assertParamExists('subscribeAccountToProject', 'subscribeAccountToProjectRequest', subscribeAccountToProjectRequest)
            const localVarPath = `/subscriptions/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscribeAccountToProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlink the external account from this account
         * @summary Unlink external account
         * @param {number} accountId The numeric ID of an account
         * @param {number} externalAccountId The numeric ID of an external account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkExternalAccount: async (accountId: number, externalAccountId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('unlinkExternalAccount', 'accountId', accountId)
            // verify required parameter 'externalAccountId' is not null or undefined
            assertParamExists('unlinkExternalAccount', 'externalAccountId', externalAccountId)
            const localVarPath = `/accounts/{accountId}/externalaccounts/{externalAccountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"externalAccountId"}}`, encodeURIComponent(String(externalAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the information of an existing user.
         * @summary Update Account Information
         * @param {number} accountId The numeric ID of an account
         * @param {AccountPartial} accountPartial Patch user properties to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountById: async (accountId: number, accountPartial: AccountPartial, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateAccountById', 'accountId', accountId)
            // verify required parameter 'accountPartial' is not null or undefined
            assertParamExists('updateAccountById', 'accountPartial', accountPartial)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new account.
         * @summary Create New Account
         * @param {Account} account Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(account: Account, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create External Account
         * @param {CreateExternalAccountRequest} createExternalAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExternalAccount(createExternalAccountRequest: CreateExternalAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateExternalAccountRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExternalAccount(createExternalAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createExternalAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Look up an account by provider and the corresponding reference ID, to see if the account is used somewhere, without knowing the internal ID of the linked OWNER account
         * @summary Find Account by External Account Provider
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAccountByProviderAndReferenceId(providerType: string, referenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAccountByProviderAndReferenceId(providerType, referenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAccountByProviderAndReferenceId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Look up an external account by provider and the corresponding reference ID, to see if the external account is used somewhere, without knowing the internal ID.
         * @summary Find External Account by Provider
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findExternalAccountByProviderAndReferenceId(providerType: string, referenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateExternalAccountRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findExternalAccountByProviderAndReferenceId(providerType, referenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findExternalAccountByProviderAndReferenceId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the information of the account with the matching account ID.
         * @summary Get Account Info by numeric ID
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountById(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountById(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAccountById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all subscriptions for an account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubscriptionsForAccount(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubscriptionsForAccount(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllSubscriptionsForAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all subscription for a project
         * @param {number} projectId The numeric ID of a Project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubscriptionsForProject(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubscriptionsForProject(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllSubscriptionsForProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all subscriptions that are global and as such relate to everything that occurs to projects related in an account\'s wallet.
         * @summary Get global subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGlobalSubscriptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetGlobalSubscriptions200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobalSubscriptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getGlobalSubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Show linked external accounts
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLinkedExternalAccounts(accountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetLinkedExternalAccounts200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkedExternalAccounts(accountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getLinkedExternalAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Links an existing external account to this account (if possible)
         * @summary Link existing external account
         * @param {number} accountId The numeric ID of an account
         * @param {number} externalAccountId The numeric ID of an external account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkExternalAccount(accountId: number, externalAccountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LinkExternalAccount200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkExternalAccount(accountId, externalAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.linkExternalAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add new subscription for this account
         * @param {number} accountId The numeric ID of an account
         * @param {SubscribeAccountToProjectRequest} subscribeAccountToProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeAccountToProject(accountId: number, subscribeAccountToProjectRequest: SubscribeAccountToProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeAccountToProject(accountId, subscribeAccountToProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.subscribeAccountToProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Unlink the external account from this account
         * @summary Unlink external account
         * @param {number} accountId The numeric ID of an account
         * @param {number} externalAccountId The numeric ID of an external account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkExternalAccount(accountId: number, externalAccountId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkExternalAccount(accountId, externalAccountId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.unlinkExternalAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the information of an existing user.
         * @summary Update Account Information
         * @param {number} accountId The numeric ID of an account
         * @param {AccountPartial} accountPartial Patch user properties to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountById(accountId: number, accountPartial: AccountPartial, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountById(accountId, accountPartial, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateAccountById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Create a new account.
         * @summary Create New Account
         * @param {Account} account Post the necessary fields for the API to create a new user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(account: Account, options?: any): AxiosPromise<Account> {
            return localVarFp.createAccount(account, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create External Account
         * @param {CreateExternalAccountRequest} createExternalAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalAccount(createExternalAccountRequest: CreateExternalAccountRequest, options?: any): AxiosPromise<CreateExternalAccountRequest> {
            return localVarFp.createExternalAccount(createExternalAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up an account by provider and the corresponding reference ID, to see if the account is used somewhere, without knowing the internal ID of the linked OWNER account
         * @summary Find Account by External Account Provider
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAccountByProviderAndReferenceId(providerType: string, referenceId: string, options?: any): AxiosPromise<Account> {
            return localVarFp.findAccountByProviderAndReferenceId(providerType, referenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Look up an external account by provider and the corresponding reference ID, to see if the external account is used somewhere, without knowing the internal ID.
         * @summary Find External Account by Provider
         * @param {string} providerType The provider or integration type for an external account
         * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findExternalAccountByProviderAndReferenceId(providerType: string, referenceId: string, options?: any): AxiosPromise<CreateExternalAccountRequest> {
            return localVarFp.findExternalAccountByProviderAndReferenceId(providerType, referenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the information of the account with the matching account ID.
         * @summary Get Account Info by numeric ID
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(accountId: number, options?: any): AxiosPromise<Account> {
            return localVarFp.getAccountById(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all subscriptions for an account
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptionsForAccount(accountId: number, options?: any): AxiosPromise<void> {
            return localVarFp.getAllSubscriptionsForAccount(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all subscription for a project
         * @param {number} projectId The numeric ID of a Project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubscriptionsForProject(projectId: number, options?: any): AxiosPromise<void> {
            return localVarFp.getAllSubscriptionsForProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all subscriptions that are global and as such relate to everything that occurs to projects related in an account\'s wallet.
         * @summary Get global subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobalSubscriptions(options?: any): AxiosPromise<Array<GetGlobalSubscriptions200ResponseInner>> {
            return localVarFp.getGlobalSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show linked external accounts
         * @param {number} accountId The numeric ID of an account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkedExternalAccounts(accountId: number, options?: any): AxiosPromise<Array<GetLinkedExternalAccounts200ResponseInner>> {
            return localVarFp.getLinkedExternalAccounts(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Links an existing external account to this account (if possible)
         * @summary Link existing external account
         * @param {number} accountId The numeric ID of an account
         * @param {number} externalAccountId The numeric ID of an external account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkExternalAccount(accountId: number, externalAccountId: number, options?: any): AxiosPromise<LinkExternalAccount200Response> {
            return localVarFp.linkExternalAccount(accountId, externalAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new subscription for this account
         * @param {number} accountId The numeric ID of an account
         * @param {SubscribeAccountToProjectRequest} subscribeAccountToProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeAccountToProject(accountId: number, subscribeAccountToProjectRequest: SubscribeAccountToProjectRequest, options?: any): AxiosPromise<void> {
            return localVarFp.subscribeAccountToProject(accountId, subscribeAccountToProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlink the external account from this account
         * @summary Unlink external account
         * @param {number} accountId The numeric ID of an account
         * @param {number} externalAccountId The numeric ID of an external account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkExternalAccount(accountId: number, externalAccountId: number, options?: any): AxiosPromise<void> {
            return localVarFp.unlinkExternalAccount(accountId, externalAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the information of an existing user.
         * @summary Update Account Information
         * @param {number} accountId The numeric ID of an account
         * @param {AccountPartial} accountPartial Patch user properties to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountById(accountId: number, accountPartial: AccountPartial, options?: any): AxiosPromise<Account> {
            return localVarFp.updateAccountById(accountId, accountPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create a new account.
     * @summary Create New Account
     * @param {Account} account Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAccount(account: Account, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAccount(account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create External Account
     * @param {CreateExternalAccountRequest} createExternalAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createExternalAccount(createExternalAccountRequest: CreateExternalAccountRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createExternalAccount(createExternalAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Look up an account by provider and the corresponding reference ID, to see if the account is used somewhere, without knowing the internal ID of the linked OWNER account
     * @summary Find Account by External Account Provider
     * @param {string} providerType The provider or integration type for an external account
     * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAccountByProviderAndReferenceId(providerType: string, referenceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAccountByProviderAndReferenceId(providerType, referenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Look up an external account by provider and the corresponding reference ID, to see if the external account is used somewhere, without knowing the internal ID.
     * @summary Find External Account by Provider
     * @param {string} providerType The provider or integration type for an external account
     * @param {string} referenceId The reference ID used to identify the user in the external provider/integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findExternalAccountByProviderAndReferenceId(providerType: string, referenceId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findExternalAccountByProviderAndReferenceId(providerType, referenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the information of the account with the matching account ID.
     * @summary Get Account Info by numeric ID
     * @param {number} accountId The numeric ID of an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccountById(accountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAccountById(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all subscriptions for an account
     * @param {number} accountId The numeric ID of an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSubscriptionsForAccount(accountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSubscriptionsForAccount(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all subscription for a project
     * @param {number} projectId The numeric ID of a Project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSubscriptionsForProject(projectId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSubscriptionsForProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all subscriptions that are global and as such relate to everything that occurs to projects related in an account\'s wallet.
     * @summary Get global subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGlobalSubscriptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getGlobalSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show linked external accounts
     * @param {number} accountId The numeric ID of an account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLinkedExternalAccounts(accountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLinkedExternalAccounts(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Links an existing external account to this account (if possible)
     * @summary Link existing external account
     * @param {number} accountId The numeric ID of an account
     * @param {number} externalAccountId The numeric ID of an external account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public linkExternalAccount(accountId: number, externalAccountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).linkExternalAccount(accountId, externalAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new subscription for this account
     * @param {number} accountId The numeric ID of an account
     * @param {SubscribeAccountToProjectRequest} subscribeAccountToProjectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public subscribeAccountToProject(accountId: number, subscribeAccountToProjectRequest: SubscribeAccountToProjectRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).subscribeAccountToProject(accountId, subscribeAccountToProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlink the external account from this account
     * @summary Unlink external account
     * @param {number} accountId The numeric ID of an account
     * @param {number} externalAccountId The numeric ID of an external account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public unlinkExternalAccount(accountId: number, externalAccountId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).unlinkExternalAccount(accountId, externalAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the information of an existing user.
     * @summary Update Account Information
     * @param {number} accountId The numeric ID of an account
     * @param {AccountPartial} accountPartial Patch user properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAccountById(accountId: number, accountPartial: AccountPartial, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAccountById(accountId, accountPartial, options).then((request) => request(this.axios, this.basePath));
    }
}



